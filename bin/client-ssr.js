const path = require("path")
const express = require("express")
// const favicon = require('serve-favicon');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
// const historyApiFallback = require('connect-history-api-fallback')
const serverConfig = require('../build/webpack.config.ssr');
const clientConfig = require('../build/webpack.config');
const fs = require("fs");
const MemoryFS = require("memory-fs");
const mfs = new MFS()

const {createBundleRenderer} = require("vue-server-renderer");
const serverBundle = require("../dist/server/vue-ssr-server-bundle.json");
const clientManifest = require("../dist/client/vue-ssr-client-manifest.json");

const app = express()

// app.use(favicon(path.join(__dirname, '../src/public', 'favicon.ico')));
// app.use(historyApiFallback({index: '/index.html'}));
// app.use('/static', express.static(path.join(__dirname, '../src/public/static')))

const compiler = webpack(serverConfig)
compiler.outputFileSystem = mfs;
compiler.watch({}, (err, stats) => {
	if (err) throw err
	// stats = stats.toJson()
	if (stats.errors.length) return

	// read bundle generated by vue-ssr-webpack-plugin
	bundle = JSON.parse(mfs.readFileSync(path.join(serverConfig.output.path, 'vue-ssr-server-bundle.json'), 'utf-8'))
	update()
})

module.exports = function setupDevServer (app, templatePath, cb) {
	let bundle
	let clientManifest

	let ready
	const readyPromise = new Promise(r => { ready = r })
	const update = () => {
		if (bundle && clientManifest) {
			ready()
			cb(bundle, {
				template,
				clientManifest
			})
		}
	}

	// read template from disk and watch
	// template = fs.readFileSync(templatePath, 'utf-8')
	// chokidar.watch(templatePath).on('change', () => {
	// 	template = fs.readFileSync(templatePath, 'utf-8')
	// 	console.log('index.html template updated.')
	// 	update()
	// })

	// modify client config to work with hot middleware
	clientConfig.output.filename = '[name].js'

	// dev middleware
	const clientCompiler = webpack(clientConfig)
	const devMiddleware = webpackDevMiddleware(clientCompiler, {
		publicPath: clientConfig.output.publicPath,
		noInfo: true
	})
	app.use(devMiddleware)

	clientCompiler.hooks.done.tap('随便写', (stats) => {
		console.log("重新编译完成！！！！！！！！")
		stats = stats.toJson()
		stats.errors.forEach(err => console.error(err))
		stats.warnings.forEach(err => console.warn(err))
		if (stats.errors.length) return
		clientManifest = JSON.parse(readFile(
			devMiddleware.fileSystem,
			'vue-ssr-client-manifest.json'
		))
		update()
	});

	// hot middleware
	app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

	// watch and update server renderer
	const serverCompiler = webpack(serverConfig)
	const mfs = new MFS()
	serverCompiler.outputFileSystem = mfs
	serverCompiler.watch({}, (err, stats) => {
		if (err) throw err
		stats = stats.toJson()
		if (stats.errors.length) return

		// read bundle generated by vue-ssr-webpack-plugin
		bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
		update()
	})

	return readyPromise
}


//需要开启服务端渲染的时候，打开
const renderer = createBundleRenderer(serverBundle, {
	runInNewContext: false,
	template: fs.readFileSync(path.resolve(__dirname, "./index.template.html"), "utf-8"),
	clientManifest,
});

function renderToString(context) {
	return new Promise((resolve, reject) => {
		renderer.renderToString(context, (err, html) => {
			err ? reject(err) : resolve(html);
		});
	});
}

app.get('*', async (req, res) => {
	const context = {url: req.url, title: "Hello SSR",}
	if (req.url === 'space') {

	}

	// 将 context 数据渲染为 HTML
	const html = await renderToString(context).catch(err => {
		if (err.url) {
			res.redirect(err.url)
		} else if (err.code === 404) {
			res.status(404).send('404 | Page Not Found')
		} else {
			// Render Error Page or Redirect
			res.status(500).send('500 | Internal Server Error')
			console.error(`error during render : ${req.url}`)
			console.error(err.stack)
		}
	});
	res.send(html)
})

const port = 4000
app.listen(port, () => {
	console.log("client application is running at http://localhost:" + port)
})
